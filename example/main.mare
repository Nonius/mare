:ffi LibC
  :fun puts (CString) I32

:ffi LibPonyRT
  :fun pony_exitcode (I32) None

:primitive Greeting
  :const hello: "Hello, World!"
  :const bye: "Goodbye, World!"

:primitive Zero
  :fun "+" (other I32) I32
    other

:primitive BelligerentFour
  :fun "+" (other I32) I32
    4 // (belligerently ignores the summand)

:primitive InfiniteZeros
  :fun "[]" (index I64): Zero

:interface Augend
  :fun "+" (other I32) I32

:primitive Generic (A non)
  :fun get A'non: A // TODO: remove 'non suffix

:class Container (A val)
  :prop value A'val // TODO: remove 'val suffix
  :new (@value)

:class Sentence
  :prop text String
  :new (@text = "[awkward silence]")

:actor Main
  :new: @do_stuff(Greeting)
  
  :be do_stuff (greeting Greeting)
    none = ()
    
    maybe_greeting (Greeting | None) = Generic(Greeting).get
    if maybe_greeting <: Greeting \
      @say_stuff(maybe_greeting)
    
    use_zero = False
    please_use_zero = True
    
    augend = case (
    | use_zero | Zero
    | please_use_zero | InfiniteZeros[999]
    | BelligerentFour
    )
    
    maybe_thirty_three (I32 | None) = I32[33]
    if maybe_thirty_three <: I32 \
      LibPonyRT.pony_exitcode(augend + maybe_thirty_three + 9)
  
  :fun say_stuff (greeting Greeting)
    pre_greeting = Container(String).new("[pre greeting]")
    sentence_source = ^(Sentence.new(^1))
    sentence = sentence_source.call(pre_greeting.value)
    LibC.puts(sentence.text.cpointer)
    sentence.text = greeting.hello
    LibC.puts(sentence.text.cpointer)
    sentence.text = greeting.bye
    LibC.puts(sentence.text.cpointer)
    None // TODO: remove
