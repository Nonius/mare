:primitive Greeting
  :const hello: "Hello, World!"
  :const bye: "Goodbye, World!"

:primitive Zero
  :fun "+" (other I32) I32
    other

:primitive BelligerentFour
  :fun "+" (other I32) I32
    4 // (belligerently ignores the summand)

:primitive InfiniteZeros
  :fun "[]" (index I64): Zero

:trait Augend
  :fun "+" (other I32) I32

:primitive Generic (A non)
  :fun get A: A

:class Container (A read)
  :prop value A
  :new (@value)

:class ContainerMaybe (A read)
  :prop value (A | None)
  :new (@value)

:class Sentence
  :prop text String
  :new (@text = "[awkward silence]")

:actor Main
  :new (env): @do_stuff(env)
  
  :be do_stuff (env Env)
    none = ()
    
    maybe_greeting (Greeting | None) = Generic(Greeting).get
    if (maybe_greeting <: Greeting) (
      @say_stuff(env, maybe_greeting)
    )
    
    use_zero = False
    please_use_zero = True
    
    augend = case (
    | use_zero | Zero
    | please_use_zero | InfiniteZeros[999]
    | BelligerentFour
    )
    
    exit_code = 0
    
    maybe = ContainerMaybe(Bool).new(True)
    value = maybe.value
    if (value <: Bool) (
      if value (
        maybe_thirty_three (I32 | None) = I32[33]
        if (maybe_thirty_three <: I32) (
          exit_code = augend + maybe_thirty_three + 9
        )
      )
    )
    
    env.exit_code = exit_code
  
  :fun say_stuff (env Env, greeting Greeting)
    pre_greeting = Container(String).new("[pre greeting]")
    sentence_source = ^(Container(Sentence).new(Sentence.new(^1)).value)
    sentence = sentence_source.call(pre_greeting.value)
    env.out.print(sentence.text)
    sentence.text = greeting.hello
    env.out.print(sentence.text)
    sentence.text = greeting.bye
    env.out.print(sentence.text)
