:import ".."
:import "../../../spec/mare/micro_test"

:actor Main
  :new (env)
    test = MicroTest.new(env)
    test.print_line_break // TODO: move to MicroTest constructor and finalizer
    
    ///
    // Count functions
    
    count = USize[0]
    count_sum = USize[0]
    Count.to(5) -> (i |
      count = count + 1
      count_sum = count_sum + i
    )
    test["Count to 5 count"].pass = count == 5
    test["Count to 5 sum"].pass = count_sum == 10
    
    ///
    // Map methods
    
    map = Map(String, U64, HashEq(String)).new // TODO: implicit default for HashFunction type argument
    test["Map size empty      "].pass = map.size == 0
    test["Map []! missing key "].pass = try (map["example"]!, False | True)
    test["Map []= return value"].pass = (map["example"] = 99) == 99
    test["Map size == 1       "].pass = map.size == 1
    test["Map []! found key   "].pass = try (map["example"]! | U64[0]) == 99
    test["Map []= again       "].pass = (map["example"] = 88) == 88
    test["Map size == 1 still "].pass = map.size == 1
    test["Map []! found again "].pass = try (map["example"]! | U64[0]) == 88
    test["Map delete          "].pass = map.delete("example") <: None
    test["Map []! gone again  "].pass = try map["example"]! <: None
    test["Map size == 0 again "].pass = map.size == 0
    
    map_clear = Map(String, U64, HashEq(String)).new // TODO: implicit default for HashFunction type argument
    map_clear["foo"] = 11
    map_clear["bar"] = 22
    map_clear["baz"] = 33
    test["Map before clear, size"].pass = map_clear.size == 3, map_clear.clear
    test["Map after clear,  size"].pass = map_clear.size == 0
    
    map_each = Map(String, U64, HashEq(String)).new // TODO: implicit default for HashFunction type argument
    map_each["foo"] = 11
    map_each["bar"] = 22
    map_each["baz"] = 33
    
    map_each_copy = Map(String, U64, HashEq(String)).new // TODO: implicit default for HashFunction type argument
    map_each.each -> (key, value | map_each_copy[key] = value)
    test["Map each, size "].pass = map_each_copy.size == 3
    test["Map each, [foo]"].pass = try (map_each_copy["foo"]! | U64[0]) == 11
    test["Map each, [bar]"].pass = try (map_each_copy["bar"]! | U64[0]) == 22
    test["Map each, [baz]"].pass = try (map_each_copy["baz"]! | U64[0]) == 33
    
    map_each_copy = Map(String, U64, HashEq(String)).new // TODO: implicit default for HashFunction type argument
    map_each.each_key -> (key | try (map_each_copy[key] = map_each[key]!))
    test["Map each_key, size "].pass = map_each_copy.size == 3
    test["Map each_key, [foo]"].pass = try (map_each_copy["foo"]! | U64[0]) == 11
    test["Map each_key, [bar]"].pass = try (map_each_copy["bar"]! | U64[0]) == 22
    test["Map each_key, [baz]"].pass = try (map_each_copy["baz"]! | U64[0]) == 33
    
    map_each_total_value = U64[0]
    map_each.each_value -> (value | map_each_total_value = map_each_total_value + value) // TODO: +=
    test["Map each_value, total"].pass = map_each_total_value == 66
    
    test.print_line_break // TODO: move to MicroTest constructor and finalizer
