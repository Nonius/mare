:import "spec"
:import ".." (Map, HashEq, HashId)

:actor MapSpecActor

:class MapSpec
  :is Spec
  :const describes: "Map"
  
  :fun new_map: Map(String, U64, HashEq(String)).new // TODO: implicit default for HashFunction type argument
  :fun new_actor_map: Map(MapSpecActor, U64, HashId(MapSpecActor)).new
  
  :it "stores and removes values at a given key"
    map = @new_map
    @assert = map.size == 0
    @assert = try (map["example"]!, False | True)
    @assert = map.has_key("example").not
    @assert = (map["example"] = 99) == 99
    @assert = map.size == 1
    @assert = try (map["example"]! | U64[0]) == 99
    @assert = map.has_key("example")
    @assert = (map["example"] = 88) == 88
    @assert = map.size == 1
    @assert = try (map["example"]! | U64[0]) == 88
    @assert = map.has_key("example")
    @assert = map.delete("example") <: None
    @assert = try map["example"]! <: None
    @assert = map.has_key("example").not
    @assert = map.size == 0
  
  :it "stores values at actor keys by identity"
    foo = MapSpecActor.new
    bar = MapSpecActor.new
    baz = MapSpecActor.new
    map = @new_actor_map
    map[foo] = 11
    map[bar] = 22
    map[baz] = 33
    @assert = try (map[foo]! == 11 | False)
    @assert = try (map[bar]! == 22 | False)
    @assert = try (map[baz]! == 33 | False)
  
  :it "can be cleared, removing all keys and values"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    @assert = map.size == 3, map.clear
    @assert = map.size == 0
  
  :it "yields each key and value"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    copy = @new_map
    map.each -> (key, value | copy[key] = value)
    
    @assert = copy.size == 3
    @assert = try (copy["foo"]! | U64[0]) == 11
    @assert = try (copy["bar"]! | U64[0]) == 22
    @assert = try (copy["baz"]! | U64[0]) == 33
  
  :it "yields each key and each value (separately)"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    copy = @new_map
    map.each_key -> (key | try (copy[key] = map[key]!))
    
    @assert = copy.size == 3
    @assert = try (copy["foo"]! | U64[0]) == 11
    @assert = try (copy["bar"]! | U64[0]) == 22
    @assert = try (copy["baz"]! | U64[0]) == 33
    
    total_value = U64[0]
    map.each_value -> (value | total_value += value)
    @assert = total_value == 66
  
  :it "yields each key and value until the criteria is met"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    this_key = ""
    found_it = map.each_until -> (key, value | this_key = key, value == 22)
    @assert = found_it
    @assert = this_key == "bar"
    
    this_key = ""
    found_it = map.each_until -> (key, value | this_key = key, value == 33)
    @assert = found_it
    @assert = this_key == "baz"
    
    this_key = ""
    found_it = map.each_until -> (key, value | this_key = key, value == 99)
    @assert = found_it.not
  
  :it "yields each key and each value (separately) until the criteria is met"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    this_key = ""
    found_it = map.each_key_until -> (key | this_key = key, key.ends_with("o"))
    @assert = found_it
    @assert = this_key == "foo"
    
    this_key = ""
    found_it = map.each_key_until -> (key | this_key = key, key.ends_with("z"))
    @assert = found_it
    @assert = this_key == "baz"
    
    this_key = ""
    found_it = map.each_key_until -> (key | this_key = key, key.ends_with("x"))
    @assert = found_it.not
  
  :it "checks if any pair in the map meets the given condition"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    @assert = map.has_any -> (key, value | key == "foo")
    @assert = map.has_any -> (key, value | key == "food").not
    @assert = map.has_any -> (key, value | value == 22)
    @assert = map.has_any -> (key, value | value == 23).not
  
  :it "checks if all pairs in the map meet the given condition"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    @assert = map.has_all -> (key, value | key.size == 3)
    @assert = map.has_all -> (key, value | key.starts_with("ba")).not
    @assert = map.has_all -> (key, value | value < 50)
    @assert = map.has_all -> (key, value | value < 30).not
