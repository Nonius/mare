:import "spec"
:import ".." (OrderedMap, HashEq, HashId)

:class OrderedMapSpec
  :is Spec
  :const describes: "OrderedMap"
  
  :fun new_map: OrderedMap(String, U64, HashEq(String)).new // TODO: implicit default for HashFunction type argument
  
  :it "stores and removes values at a given key"
    map = @new_map
    @assert = map.size == 0
    @assert = try (map["example"]!, False | True)
    @assert = map.has_key("example").not
    @assert = (map["example"] = 99) == 99
    @assert = map.size == 1
    @assert = try (map["example"]! | U64[0]) == 99
    @assert = map.has_key("example")
    @assert = (map["example"] = 88) == 88
    @assert = map.size == 1
    @assert = try (map["example"]! | U64[0]) == 88
    @assert = map.has_key("example")
    @assert = map.delete("example") <: None
    @assert = try map["example"]! <: None
    @assert = map.has_key("example").not
    @assert = map.size == 0
  
  :it "can be cleared, removing all keys and values"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    
    @assert = map.size == 3, map.clear
    @assert = map.size == 0
  
  :it "yields each key and value (in insertion order)"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    map["foo"] = 44
    map["baz"] = 55
    map["foo"] = 66
    
    keys Array(String) = []
    values Array(U64) = []
    map.each -> (key, value | keys << key, values << value)
    
    @assert = keys == ["bar", "baz", "foo"]
    @assert = values == [22, 55, 66]
  
  :it "yields each key and each value (in insertion order, separately)"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33
    map["foo"] = 44
    map["baz"] = 55
    map["foo"] = 66
    
    keys Array(String) = []
    values Array(U64) = []
    map.each_key -> (key | keys << key)
    map.each_value -> (value | values << value)
    
    @assert = keys == ["bar", "baz", "foo"]
    @assert = values == [22, 55, 66]
