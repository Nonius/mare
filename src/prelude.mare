// None
primitive None:

// Booleans
enum Bool:
  const bit_width U8: 1
  member False: 0
  member True: 1
  fun "==" (other Bool) Bool: compiler intrinsic
  fun "!=" (other Bool) Bool: compiler intrinsic

// Numerics
interface val Numeric:
  const bit_width U8:
  // TODO: arithmetic method interfaces with type parameters on Numeric[A] type

numeric U8:
  const bit_width U8: 8
  
  fun non "[]" (value U8) U8: value
  
  fun "==" (other U8) Bool: compiler intrinsic
  fun "!=" (other U8) Bool: compiler intrinsic
  fun "<" (other U8) Bool: compiler intrinsic
  fun "<=" (other U8) Bool: compiler intrinsic
  fun ">" (other U8) Bool: compiler intrinsic
  fun ">=" (other U8) Bool: compiler intrinsic
  
  fun "+" (other U8) U8: compiler intrinsic
  fun "-" (other U8) U8: compiler intrinsic
  fun "*" (other U8) U8: compiler intrinsic
  fun "/" (other U8) U8: compiler intrinsic
  fun "%" (other U8) U8: compiler intrinsic

numeric U32:
  const bit_width U8: 32
  
  fun non "[]" (value U32) U32: value
  
  fun "==" (other U32) Bool: compiler intrinsic
  fun "!=" (other U32) Bool: compiler intrinsic
  fun "<" (other U32) Bool: compiler intrinsic
  fun "<=" (other U32) Bool: compiler intrinsic
  fun ">" (other U32) Bool: compiler intrinsic
  fun ">=" (other U32) Bool: compiler intrinsic
  
  fun "+" (other U32) U32: compiler intrinsic
  fun "-" (other U32) U32: compiler intrinsic
  fun "*" (other U32) U32: compiler intrinsic
  fun "/" (other U32) U32: compiler intrinsic
  fun "%" (other U32) U32: compiler intrinsic

numeric U64:
  const bit_width U8: 64
  
  fun non "[]" (value U64) U64: value
  
  fun "==" (other U64) Bool: compiler intrinsic
  fun "!=" (other U64) Bool: compiler intrinsic
  fun "<" (other U64) Bool: compiler intrinsic
  fun "<=" (other U64) Bool: compiler intrinsic
  fun ">" (other U64) Bool: compiler intrinsic
  fun ">=" (other U64) Bool: compiler intrinsic
  
  fun "+" (other U64) U64: compiler intrinsic
  fun "-" (other U64) U64: compiler intrinsic
  fun "*" (other U64) U64: compiler intrinsic
  fun "/" (other U64) U64: compiler intrinsic
  fun "%" (other U64) U64: compiler intrinsic

numeric I8:
  const bit_width U8: 8
  const is_signed: True
  
  fun non "[]" (value I8) I8: value
  
  fun "==" (other I8) Bool: compiler intrinsic
  fun "!=" (other I8) Bool: compiler intrinsic
  fun "<" (other I8) Bool: compiler intrinsic
  fun "<=" (other I8) Bool: compiler intrinsic
  fun ">" (other I8) Bool: compiler intrinsic
  fun ">=" (other I8) Bool: compiler intrinsic
  
  fun "+" (other I8) I8: compiler intrinsic
  fun "-" (other I8) I8: compiler intrinsic
  fun "*" (other I8) I8: compiler intrinsic
  fun "/" (other I8) I8: compiler intrinsic
  fun "%" (other I8) I8: compiler intrinsic

numeric I32:
  const bit_width U8: 32
  const is_signed: True
  
  fun non "[]" (value I32) I32: value
  
  fun "==" (other I32) Bool: compiler intrinsic
  fun "!=" (other I32) Bool: compiler intrinsic
  fun "<" (other I32) Bool: compiler intrinsic
  fun "<=" (other I32) Bool: compiler intrinsic
  fun ">" (other I32) Bool: compiler intrinsic
  fun ">=" (other I32) Bool: compiler intrinsic
  
  fun "+" (other I32) I32: compiler intrinsic
  fun "-" (other I32) I32: compiler intrinsic
  fun "*" (other I32) I32: compiler intrinsic
  fun "/" (other I32) I32: compiler intrinsic
  fun "%" (other I32) I32: compiler intrinsic

numeric I64:
  const bit_width U8: 64
  const is_signed: True
  
  fun non "[]" (value I64) I64: value
  
  fun "==" (other I64) Bool: compiler intrinsic
  fun "!=" (other I64) Bool: compiler intrinsic
  fun "<" (other I64) Bool: compiler intrinsic
  fun "<=" (other I64) Bool: compiler intrinsic
  fun ">" (other I64) Bool: compiler intrinsic
  fun ">=" (other I64) Bool: compiler intrinsic
  
  fun "+" (other I64) I64: compiler intrinsic
  fun "-" (other I64) I64: compiler intrinsic
  fun "*" (other I64) I64: compiler intrinsic
  fun "/" (other I64) I64: compiler intrinsic
  fun "%" (other I64) I64: compiler intrinsic

numeric F32:
  const bit_width U8: 32
  const is_signed: True
  const is_floating_point: True
  
  fun non "[]" (value F32) F32: value
  
  fun "==" (other F32) Bool: compiler intrinsic
  fun "!=" (other F32) Bool: compiler intrinsic
  fun "<" (other F32) Bool: compiler intrinsic
  fun "<=" (other F32) Bool: compiler intrinsic
  fun ">" (other F32) Bool: compiler intrinsic
  fun ">=" (other F32) Bool: compiler intrinsic
  
  fun "+" (other F32) F32: compiler intrinsic
  fun "-" (other F32) F32: compiler intrinsic
  fun "*" (other F32) F32: compiler intrinsic
  fun "/" (other F32) F32: compiler intrinsic
  fun "%" (other F32) F32: compiler intrinsic

numeric F64:
  const bit_width U8: 64
  const is_signed: True
  const is_floating_point: True
  
  fun non "[]" (value F64) F64: value
  
  fun "==" (other F64) Bool: compiler intrinsic
  fun "!=" (other F64) Bool: compiler intrinsic
  fun "<" (other F64) Bool: compiler intrinsic
  fun "<=" (other F64) Bool: compiler intrinsic
  fun ">" (other F64) Bool: compiler intrinsic
  fun ">=" (other F64) Bool: compiler intrinsic
  
  fun "+" (other F64) F64: compiler intrinsic
  fun "-" (other F64) F64: compiler intrinsic
  fun "*" (other F64) F64: compiler intrinsic
  fun "/" (other F64) F64: compiler intrinsic
  fun "%" (other F64) F64: compiler intrinsic

// ...

class val CString: // TODO: don't special-case in compiler as a char pointer

class val String: // TODO: use for string literals in the compiler
  prop _cpointer CString:
  prop _size U64: // TODO: cross-platform
  prop _alloc U64: // TODO: cross-platform
  new from_cpointer (@_cpointer, @_size, @_alloc):

class val Env:
