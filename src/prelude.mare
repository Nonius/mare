// None
primitive None:

// Booleans
enum Bool:
  const bit_width U8: 1
  member False: 0
  member True: 1
  fun val is_true: @
  fun val is_false: @invert
  fun val not: @invert

// Numerics
interface val Numeric:
  const bit_width U8: 64
  const is_signed Bool: False
  const is_floating_point Bool: False
  // TODO: arithmetic method interfaces with type parameters on Numeric[A] type
  
  fun val u8 U8: compiler intrinsic
  fun val u32 U32: compiler intrinsic
  fun val u64 U64: compiler intrinsic
  fun val i8 I8: compiler intrinsic
  fun val i32 I32: compiler intrinsic
  fun val i64 I64: compiler intrinsic
  fun val f32 F32: compiler intrinsic
  fun val f64 F64: compiler intrinsic

interface val NumericMethods: // TODO: don't use interface for this... `common`?
  const bit_width U8:
  const is_signed Bool:
  const is_floating_point Bool:
  
  fun non "[]" (value @) @: value
  
  fun val "==" (other @) Bool: compiler intrinsic
  fun val "!=" (other @) Bool: compiler intrinsic
  fun val "<" (other @) Bool: compiler intrinsic
  fun val "<=" (other @) Bool: compiler intrinsic
  fun val ">" (other @) Bool: compiler intrinsic
  fun val ">=" (other @) Bool: compiler intrinsic
  
  fun val "+" (other @) @: compiler intrinsic
  fun val "-" (other @) @: compiler intrinsic
  fun val "*" (other @) @: compiler intrinsic
  fun val "/" (other @) @: compiler intrinsic
  fun val "%" (other @) @: compiler intrinsic
  
  fun val min (other @) @: if (@ < other) (@ | other)
  fun val max (other @) @: if (@ > other) (@ | other)
  fun val abs: if (@is_signed && @ < 0) (@[0] - @ | @)

interface val IntegerMethods: // TODO: don't use interface for this... `common`?
  const bit_width U8: // TODO: dedup with NumericMethods
  
  fun val invert @: compiler intrinsic
  fun val reverse_bits @: compiler intrinsic
  fun val swap_bytes @: compiler intrinsic
  fun val leading_zeros U8: compiler intrinsic
  fun val trailing_zeros U8: compiler intrinsic
  fun val count_ones U8: compiler intrinsic
  fun val count_zeros U8: @invert.count_ones

numeric U8:
  const bit_width U8: 8

numeric U32:
  const bit_width U8: 32

numeric U64:
  const bit_width U8: 64

numeric I8:
  const bit_width U8: 8
  const is_signed: True

numeric I32:
  const bit_width U8: 32
  const is_signed: True

numeric I64:
  const bit_width U8: 64
  const is_signed: True

numeric F32:
  const bit_width U8: 32
  const is_signed: True
  const is_floating_point: True

numeric F64:
  const bit_width U8: 64
  const is_signed: True
  const is_floating_point: True

// ...

class CString: // TODO: don't special-case in compiler as a char pointer

class val String: // TODO: use for string literals in the compiler
  prop _size U64: // TODO: cross-platform
  prop _alloc U64: // TODO: cross-platform
  prop cpointer CString: // TODO: keep private as CString'ref
  new from_cpointer (@cpointer, @_size, @_alloc):

class val Env:
