// None
:primitive None

// Booleans
:enum Bool
  :const bit_width U8: 1
  :member False: 0
  :member True: 1
  :fun val is_true: @
  :fun val is_false: @invert
  :fun val not: @invert

// Numerics
:trait val Numeric
  :const bit_width U8: 64
  :const is_signed Bool: False
  :const is_floating_point Bool: False
  // TODO: arithmetic method traits with type parameters on Numeric[A] type
  
  :fun val u8 U8: compiler intrinsic
  :fun val u32 U32: compiler intrinsic
  :fun val u64 U64: compiler intrinsic
  :fun val i8 I8: compiler intrinsic
  :fun val i32 I32: compiler intrinsic
  :fun val i64 I64: compiler intrinsic
  :fun val f32 F32: compiler intrinsic
  :fun val f64 F64: compiler intrinsic

:trait val NumericMethods // TODO: don't use :trait for this... `common`?
  :const bit_width U8
  :const is_signed Bool
  :const is_floating_point Bool
  
  :fun non "[]" (value @'val) @'val: value
  :fun non zero @'val: compiler intrinsic
  
  :fun val "==" (other @) Bool: compiler intrinsic
  :fun val "!=" (other @) Bool: compiler intrinsic
  :fun val "<" (other @) Bool: compiler intrinsic
  :fun val "<=" (other @) Bool: compiler intrinsic
  :fun val ">" (other @) Bool: compiler intrinsic
  :fun val ">=" (other @) Bool: compiler intrinsic
  
  :fun val "+" (other @) @: compiler intrinsic
  :fun val "-" (other @) @: compiler intrinsic
  :fun val "*" (other @) @: compiler intrinsic
  :fun val "/" (other @) @: compiler intrinsic
  :fun val "%" (other @) @: compiler intrinsic
  
  :fun val min (other @) @: if (@ < other) (@ | other)
  :fun val max (other @) @: if (@ > other) (@ | other)
  :fun val abs: if (@is_signed && @ < @zero) (@zero - @ | @)

:trait val IntegerMethods // TODO: don't use :trait for this... `common`?
  :const bit_width U8 // TODO: dedup with NumericMethods
  
  :fun val bit_and (other @) @: compiler intrinsic
  :fun val bit_or (other @) @: compiler intrinsic
  :fun val bit_xor (other @) @: compiler intrinsic
  :fun val invert @: compiler intrinsic
  :fun val reverse_bits @: compiler intrinsic
  :fun val swap_bytes @: compiler intrinsic
  :fun val leading_zeros U8: compiler intrinsic
  :fun val trailing_zeros U8: compiler intrinsic
  :fun val count_ones U8: compiler intrinsic
  :fun val count_zeros U8: @invert.count_ones
  :fun val next_pow2 @: compiler intrinsic

:trait val Float32Methods
  :fun non from_bits (bits U32) @'val: compiler intrinsic
  :fun val bits U32: compiler intrinsic
  
  :fun non nan:          @from_bits(0x7FC0_0000)
  :fun non infinity:     @from_bits(0x7F80_0000)
  :fun non neg_infinity: @from_bits(0xFF80_0000)
  :fun non max_value:    @from_bits(0x7F7F_FFFF)
  :fun non min_value:    @from_bits(0xFF7F_FFFF)
  
  // Return true if the number is NaN.
  :fun val is_nan
    @bits.bit_and(0x7F80_0000) == 0x7F80_0000 && // exponent
    @bits.bit_and(0x007F_FFFF) != 0              // mantissa
  
  // Return true if the number is positive or negative infinity.
  :fun val is_infinite
    @bits.bit_and(0x7F80_0000) == 0x7F80_0000 && // exponent
    @bits.bit_and(0x007F_FFFF) == 0              // mantissa
  
  // Return true if the number is neither NaN nor positive or negative infinity.
  :fun val is_finite
    @bits.bit_and(0x7F80_0000) != 0x7F80_0000 // exponent

:trait val Float64Methods
  :fun non from_bits (bits U64) @'val: compiler intrinsic
  :fun val bits U64: compiler intrinsic
  
  :fun non nan:          @from_bits(0x7FF8_0000_0000_0000)
  :fun non infinity:     @from_bits(0x7FF0_0000_0000_0000)
  :fun non neg_infinity: @from_bits(0xFFF0_0000_0000_0000)
  :fun non max_value:    @from_bits(0x7FEF_FFFF_FFFF_FFFF)
  :fun non min_value:    @from_bits(0xFFEF_FFFF_FFFF_FFFF)
  
  // Return true if the number is NaN.
  :fun val is_nan
    @bits.bit_and(0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000 && // exponent
    @bits.bit_and(0x000F_FFFF_FFFF_FFFF) != 0                        // mantissa
  
  // Return true if the number is positive or negative infinity.
  :fun val is_infinite
    @bits.bit_and(0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000 && // exponent
    @bits.bit_and(0x000F_FFFF_FFFF_FFFF) == 0                        // mantissa
  
  // Return true if the number is neither NaN nor positive or negative infinity.
  :fun val is_finite
    @bits.bit_and(0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000 // exponent

:numeric U8
  :const bit_width U8: 8

:numeric U32
  :const bit_width U8: 32

:numeric U64
  :const bit_width U8: 64

:numeric I8
  :const bit_width U8: 8
  :const is_signed: True

:numeric I32
  :const bit_width U8: 32
  :const is_signed: True

:numeric I64
  :const bit_width U8: 64
  :const is_signed: True

:numeric F32
  :const bit_width U8: 32
  :const is_signed: True
  :const is_floating_point: True

:numeric F64
  :const bit_width U8: 64
  :const is_signed: True
  :const is_floating_point: True

// ...

:class tag CPointer (A) // TODO: don't special-case in compiler as a faux-class
  :fun non null @'ref: compiler intrinsic
  :fun non _alloc (space U64) @'ref: compiler intrinsic
  :fun ref _realloc (space U64) @: compiler intrinsic
  :fun box _get_at (index U64) A: compiler intrinsic
  :fun ref _assign_at (index U64, value A) A: compiler intrinsic
  :fun ref _displace_at (index U64, value A) A: compiler intrinsic

:class val String
  :prop _size U64 // TODO: cross-platform
  :prop _alloc U64 // TODO: cross-platform
  :prop _ptr CPointer(U8)'ref
  :new from_cpointer (@_ptr, @_size, @_alloc)
  :fun cpointer CPointer(U8): @_ptr

:class ref Array (A)
  :prop _size U64 // TODO: cross-platform
  :prop _alloc U64 // TODO: cross-platform
  :prop _ptr CPointer(A)'ref
  
  :fun ref _ptr_set_null
    @_alloc = 0
    @_ptr = CPointer(A).null
  
  :fun ref _ptr_allocate (space U64)
    @_alloc = space.next_pow2.max(space).max(8)
    @_ptr = CPointer(A)._alloc(@_alloc)
  
  :fun ref _ptr_reallocate (space U64)
    @_alloc = space.next_pow2.max(space).max(8)
    @_ptr = @_ptr._realloc(@_alloc)
  
  :new (space U64 = 0)
    @_size = 0
    
    if (space > 0) (
      @_ptr_allocate(space)
    |
      @_ptr_set_null
    )
  
  :fun ref reserve (space U64)
    if (@_alloc < space) \
      @_ptr_reallocate(space)
  
  :fun "[]" (index)
    // TODO: bounds checking, partial function
    @_ptr._get_at(index)
  
  :fun ref "[]=" (index, value)
    // TODO: bounds checking, partial function
    @_ptr._assign_at(index, --value)
  
  :fun ref "<<" (value)
    @reserve(@_size + 1)
    @_ptr._assign_at(@_size, --value)
    @_size = @_size + 1
    @

:class val Env
