// TODO: Get rid of this hack:
:ffi InspectLibC
  :fun puts (CPointer(U8)) I32

:trait box _InspectEach
  // TODO: use each instead of size and []!
  :fun size USize
  :fun "[]!" (index USize) box // TODO: allow any box

// TODO: Move this out of prelude maybe? Does that make sense?
// TODO: Make this into a trait with "implement for"/typeclass style polymorphism
:primitive Inspect
  :fun "[]" (input box) String'box // TODO: return String'val using recover
    output = String.new
    @into(input, output)
    output
  
  :fun out (input box)
    InspectLibC.puts(@[input].cstring)
  
  :fun into (input box, output String'ref) None // TODO: use something like Crystal IO instead of String?
    case (
    | input <: Bool |
      output << if input ("True" | "False")
    | input <: U8    | @into(input.u64, output) // TODO: unify into one integer clause?
    | input <: U32   | @into(input.u64, output) // TODO: unify into one integer clause?
    | input <: USize | @into(input.u64, output) // TODO: unify into one integer clause?
    | input <: U64   |                          // TODO: unify into one integer clause?
      number = input
      digits Array(U8) = []
      while (number > 0) (
        digits << (number % 10).u8 + '0'
        number = number / 10
      )
      digits.reverse_each -> (digit | output.push_byte(digit))
      if (digits.size == 0) (output.push_byte('0'))
    | input <: I8    | @into(input.i64, output) // TODO: unify into one integer clause?
    | input <: I32   | @into(input.i64, output) // TODO: unify into one integer clause?
    | input <: ISize | @into(input.i64, output) // TODO: unify into one integer clause?
    | input <: I64   |                          // TODO: unify into one integer clause?
      positive = if (input >= 0) (input | output.push_byte('-'), input.abs)
      @into(positive.u64, output)
    | input <: String'box |
      output.push_byte('"')
      output << input // TODO: show some characters as escaped.
      output.push_byte('"')
    | input <: _InspectEach |
      output.push_byte('[')
      index USize = 0
      while (index < input.size) (
        if (index > 0) (output.push_byte(','), output.push_byte(' '))
        try (@into(input[index]!, output))
        index += 1
      )
      output.push_byte(']')
    | // TODO: support inspection of more types
      output << "<uninspectable>"
    )
    None
