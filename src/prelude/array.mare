:class ref Array (A)
  :prop _size USize
  :prop _alloc USize
  :prop _ptr CPointer(A)'ref
  
  :fun ref _ptr_set_null
    @_alloc = 0
    @_ptr = CPointer(A).null
  
  :fun ref _ptr_allocate (space USize)
    @_alloc = space.next_pow2.max(space).max(8)
    @_ptr = CPointer(A)._alloc(@_alloc)
  
  :fun ref _ptr_reallocate (space USize)
    @_alloc = space.next_pow2.max(space).max(8)
    @_ptr = @_ptr._realloc(@_alloc)
  
  :new (space USize = 0)
    @_size = 0
    
    if (space > 0) (
      @_ptr_allocate(space)
    |
      @_ptr_set_null
    )
  
  :fun size: @_size
  
  :fun ref reserve (space USize)
    if (@_alloc < space) \
      @_ptr_reallocate(space)
  
  :fun "[]!" (index)
    if (@size <= index) error!
    @_ptr._get_at(index)
  
  :fun ref "[]=!" (index, value)
    if (@size <= index) error!
    @_ptr._assign_at(index, --value)
  
  :fun ref "<<" (value)
    @reserve(@_size + 1)
    @_ptr._assign_at(@_size, --value)
    @_size = @_size + 1
    @
  
  :fun each
    index USize = 0
    while (index < @_size) (
      yield @_ptr._get_at(index)
      index = index + 1 // TODO: index += 1
    )
    None
  
  :fun each_with_index
    index USize = 0
    while (index < @_size) (
      yield (@_ptr._get_at(index), index)
      index = index + 1 // TODO: index += 1
    )
    None
