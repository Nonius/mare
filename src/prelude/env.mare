:class val Env
  :prop out StdStream
  :prop err StdStream
  :new val _create
    @out = StdStream._out
    @err = StdStream._err
  
  :fun "exit_code=" (value)
    LibPonyc.pony_exitcode(value)

:actor StdStream
  :prop _stream CPointer(None)'ref
  :new _out: @_stream = LibPonyc.pony_os_stdout
  :new _err: @_stream = LibPonyc.pony_os_stderr
  :be print (data String)
    LibPonyc.pony_os_std_print(@_stream, data.cpointer, data.size)

// TODO: Make FFI types private to a library?
:ffi LibPonyc
  :fun pony_os_stdout () CPointer(None)'ref
  :fun pony_os_stderr () CPointer(None)'ref
  :fun pony_os_std_print (CPointer(None)'ref, CPointer(U8), U64) None // TODO: USize instead of U64
  :fun pony_exitcode (I32) None
